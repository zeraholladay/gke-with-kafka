version: '3.8'
services:
  zookeeper-1:
    image: confluentinc/cp-zookeeper:5.5.1
    container_name: zookeeper-1
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-1:
    image: confluentinc/cp-kafka:5.5.1
    container_name: kafka-1
    ports:
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:9092,EXTERNAL://localhost:29092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    depends_on:
      - zookeeper-1

  kafka-2:
    image: confluentinc/cp-kafka:5.5.1
    container_name: kafka-2
    ports:
      - '29093:29093'
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:9092,EXTERNAL://localhost:29093
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    depends_on:
      - zookeeper-1

  kafka-3:
    image: confluentinc/cp-kafka:5.5.1
    container_name: kafka-3
    ports:
      - '29094:29094'
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:9092,EXTERNAL://localhost:29094
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    depends_on:
      - zookeeper-1

  django_redis:
    image: redis:6.2-alpine
    container_name: kafka-manager-redis
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass local_development_only

  django_db:
    image: postgres:12
    restart: always
    container_name: kafka-manager-db
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: local_development_only

  django_celery:
    build: ./kafka_manager_api
    container_name: kafka-manager-celery
    environment:
      DATABASE_PASSWORD: local_development_only
      DATABASE_USER: postgres
      DATABASE_HOST: kafka-manager-db
      DATABASE_NAME: postgres
      DATABASE_PORT: 5432
      LOCAL_ADMIN_USER: admin
      LOCAL_ADMIN_PASS: admin
      REDIS_HOST: kafka-manager-redis
      REDIS_PASSWORD: local_development_only
    command: watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- celery -A kafka_manager_app worker -B -l INFO
    volumes:
      - ./kafka_manager_api:/kafka_manager_api
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - django_db
      - django_redis

  djangoweb:
    build: ./kafka_manager_api
    container_name: kafka-manager-api
    environment:
      DATABASE_PASSWORD: local_development_only
      DATABASE_USER: postgres
      DATABASE_HOST: kafka-manager-db
      DATABASE_NAME: postgres
      DATABASE_PORT: 5432
      LOCAL_ADMIN_USER: admin
      LOCAL_ADMIN_PASS: admin
      REDIS_HOST: kafka-manager-redis
      REDIS_PASSWORD: local_development_only
    command: >
      bash -c "sleep 2 && python3 manage.py migrate
      && echo \"from django.contrib.auth.models import User; import os; User.objects.filter(username=os.environ['LOCAL_ADMIN_USER']).exists() or User.objects.create_superuser(os.environ['LOCAL_ADMIN_USER'], '', os.environ['LOCAL_ADMIN_PASS'])\" | python3 manage.py shell
      && python3 manage.py runserver 0.0.0.0:8888"
    volumes:
      - ./kafka_manager_api:/kafka_manager_api
    ports:
      - 8888:8888
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - django_db

  node:
    build: ./kafka_manager_frontend
    container_name: kafka-manager-frontend
    environment:
      DATABASE_PASSWORD: local_development_only
    command: >
      bash -c "npm run serve"
    volumes:
      - ./kafka_manager_frontend:/kafka_manager_frontend
    ports:
      - 8080:8080
